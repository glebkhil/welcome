/*
	–¢–æ–∫–µ–Ω –æ—Ç TELEGRAM –±–æ—Ç–∞
*/
const TOKEN = '';

/* */
const fs = require('fs'), path = require('path'), telegram = new (require('node-telegram-bot-api'))(TOKEN, { polling: true });

/* */
let users = {};

/* */
telegram.on('polling_error', (error) => {
	console.log(error);
});

/* */
telegram.onText(/\/start/, ( message ) => {
	/* */
	users[String(message.chat.id)] = {
		chat: message.chat,
		scene: 1,
		submit_an_application: false,
		
		come: {
			type: null,
			description: null
		},

		experience: null,
		time: null,
	};

	/* */
	let description = 'ü§† –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ' + message.chat.first_name + ' ' + message.chat.last_name + '!\n\n';
	description += '–ú—ã –æ–±–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ –∑–Ω–∞–µ–º –∑–∞—á–µ–º —Ç—ã –∑–¥–µ—Å—å. üòè\n–ù–∞–∂–∏–º–∞–π `‚ûï –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É` üëá';

	/* */
	telegram.sendMessage(message.chat.id, description, {
		reply_markup: {
			inline_keyboard: [
				[
					{
						text: '‚ûï –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É',
						callback_data: 'submit_an_application'
					}
				]
			]
		}
	});
});

telegram.onText(/\/adm (.+)/, ( message, code ) => {
	fs.readFile(path.resolve(__dirname, 'configuration.json'), 'utf-8', function(e, d) {
		if(e) {
			/* */
			console.log(e);

			/* */
			telegram.sendMessage(message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.code) + '.');
		}
		else {
			try {
				/* */
				let configuration = JSON.parse(d);

				/* */
				if('code' in configuration && String(code[1]) === String(configuration.code)) {
					fs.readdir(path.resolve(__dirname, 'accounts'), function(e, items) {
						if(e) {
							/* */
							console.log(e);

							/* */
							telegram.sendMessage(message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.code) + '.');
						}
						else {
							let count = 0, inline_keyboard = [];

							if(items.length > 0) {
								for(let i = 0; i < items.length; i++) {
									if(items[i].match(/^(.*)\.json$/i)) {
										count++;
										inline_keyboard.push([{ text: items[i], callback_data: ('open-' + String(items[i])) }]);
									}
								}
							}

							if(count > 0) {
								telegram.sendMessage(message.chat.id, ('üåù –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: ' + String(count)), {
									reply_markup: {
										inline_keyboard: inline_keyboard.slice(0, 9)
									}
								});
							}
							else {
								telegram.sendMessage(message.chat.id, '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
							}
						}
					});
				}
			}
			catch(e) {
				/* */
				console.log(e);

				/* */
				telegram.sendMessage(message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.message) + '.');
			}
		}
	});
});

telegram.onText(/\/change (.+) (.+)/, ( message, code ) => {
	fs.readFile(path.resolve(__dirname, 'configuration.json'), 'utf-8', function(e, d) {
		if(e) {
			/* */
			console.log(e);

			/* */
			telegram.sendMessage(message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.code) + '.');
		}
		else {
			try {
				/* */
				let configuration = JSON.parse(d);

				/* */
				if('code' in configuration && String(code[1]) === String(configuration.code)) {
					fs.writeFile(path.resolve(__dirname, 'configuration.json'), JSON.stringify({ code: code[2] }), function(e) {
						/* */
						let description = (e) ? '‚òπÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.' : ('‚ûï –ü–∞—Ä–æ–ª—å –æ—Ç –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∞ —Å–º–µ–Ω–µ–Ω–∞.\n\n‚ûï –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ' + code[2]);

						/* */
						if(e) {
							console.log(e);
						}

						/* */
						telegram.sendMessage(message.chat.id, description);
					});
				}
			}
			catch(e) {
				/* */
				console.log(e);

				/* */
				telegram.sendMessage(message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.message) + '.');
			}
		}
	});
});

/* */
telegram.on('callback_query', function onCallbackQuery(callbackQuery) {
	switch(callbackQuery.data) {
		case 'submit_an_application': {
			if(is_scene(callbackQuery.message, 1)) {
				/* */
				users[String(callbackQuery.message.chat.id)]['scene'] = 2;

				/* */
				let description = 'üìØ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏\n\n';
				description += '1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–¥–∏–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º (–ø–æ—Ä–Ω–æ, –Ω–∞—Å–∏–ª–∏–µ, —É–±–∏–π—Å—Ç–≤–∞, –ø—Ä–∏–∑—ã–≤—ã –∫ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º—É, —Ä–µ–∫–ª–∞–º–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤)\n';
				description += '2. –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º, —Ñ–ª—É–¥, –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã\n';
				description += '3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–∑–Ω–∞–≤–∞—Ç—å —É –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n';
				description += '4. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é\n';
				description += '5. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ –≤ –±–µ—Å–µ–¥–µ –≤–æ—Ä–∫–µ—Ä–æ–≤\n';
				description += '6. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–∞—à–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤/–∫–∞—Ä—Ç';

				/* */
				telegram.sendMessage(callbackQuery.message.chat.id, description, {
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω',
									callback_data: 'accept'
								}
							]
						]
					}
				});
			}
			break;
		}
		case 'accept': {
			if(is_scene(callbackQuery.message, 2)) {
				/* */
				users[String(callbackQuery.message.chat.id)]['submit_an_application'] = true;
				users[String(callbackQuery.message.chat.id)]['scene'] = 3;

				/* */
				let description = 'üìØ –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏\n\n';
				description += '1. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –º–µ–¥–∏–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º (–ø–æ—Ä–Ω–æ, –Ω–∞—Å–∏–ª–∏–µ, —É–±–∏–π—Å—Ç–≤–∞, –ø—Ä–∏–∑—ã–≤—ã –∫ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º—É, —Ä–µ–∫–ª–∞–º–∞ –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤)\n';
				description += '2. –ó–∞–ø—Ä–µ—â–µ–Ω —Å–ø–∞–º, —Ñ–ª—É–¥, –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤, —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã\n';
				description += '3. –ó–∞–ø—Ä–µ—â–µ–Ω–æ —É–∑–Ω–∞–≤–∞—Ç—å —É –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n';
				description += '4. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Å–∫–æ—Ä–±–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é\n';
				description += '5. –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ –≤ –±–µ—Å–µ–¥–µ –≤–æ—Ä–∫–µ—Ä–æ–≤\n';
				description += '6. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω–µ—Å—ë—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤–∞—à–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤/–∫–∞—Ä—Ç\n\n‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞';

				/* */
				telegram.editMessageText(description, {
					chat_id: callbackQuery.message.chat.id,
					message_id: callbackQuery.message.message_id
				});

				/* */
				telegram.sendMessage(callbackQuery.message.chat.id, '‚ûï –û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?', {
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '‚òÅÔ∏è –¢–µ–º–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ',
									callback_data: 'forum'
								},
								{
									text: 'ü§ù –û—Ç –∑–Ω–∞–∫–æ–º–æ–≥–æ',
									callback_data: 'familiar'
								}
							],
							[
								{
									text: 'üéØ –†–µ–∫–ª–∞–º–∞',
									callback_data: 'advertising'
								},
								{
									text: 'üëÆ‚Äç‚ôÇÔ∏è –î—Ä—É–≥–æ–µ',
									callback_data: 'other'
								}
							]
						],
					}
				});
			}
			break;
		}
		case 'forum': {
			if(is_scene(callbackQuery.message, 3)) {
				/* */
				users[String(callbackQuery.message.chat.id)]['come']['type'] = '‚òÅÔ∏è –¢–µ–º–∞ –Ω–∞ —Ñ–æ—Ä—É–º–µ';
				users[String(callbackQuery.message.chat.id)]['scene'] = 4;

				/* */
				telegram.sendMessage(callbackQuery.message.chat.id, '‚ûï –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ —Ñ–æ—Ä—É–º–µ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –ø—Ä–∏—à–ª–∏');
			}
			break;
		}
		case 'familiar': {
			if(is_scene(callbackQuery.message, 3)) {
				/* */
				users[String(callbackQuery.message.chat.id)]['come']['type'] = 'ü§ù –û—Ç –∑–Ω–∞–∫–æ–º–æ–≥–æ';
				users[String(callbackQuery.message.chat.id)]['scene'] = 4;

				/* */
				telegram.sendMessage(callbackQuery.message.chat.id, '‚ûï –£–∫–∞–∂–∏—Ç–µ Telegram —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª');
			}
			break;
		}
		case 'advertising': {
			if(is_scene(callbackQuery.message, 3)) {
				/* */
				users[String(callbackQuery.message.chat.id)]['come']['type'] = 'üéØ –†–µ–∫–ª–∞–º–∞';
				users[String(callbackQuery.message.chat.id)]['scene'] = 4;

				/* */
				telegram.sendMessage(callbackQuery.message.chat.id, '‚ûï –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –Ω–∞—à–ª–∏ —Ä–µ–∫–ª–∞–º—É');
			}
			break;
		}
		case 'other': {
			if(is_scene(callbackQuery.message, 3)) {
				/* */
				users[String(callbackQuery.message.chat.id)]['come']['type'] = 'üëÆ‚Äç‚ôÇÔ∏è –î—Ä—É–≥–æ–µ';
				users[String(callbackQuery.message.chat.id)]['scene'] = 4;

				/* */
				telegram.sendMessage(callbackQuery.message.chat.id, '‚ûï –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –≥–¥–µ –≤—ã –Ω–∞—à–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å');
			}
			break;
		}
		case 'send': {
			if(is_scene(callbackQuery.message, 7)) {
				fs.writeFile(path.resolve(__dirname, 'accounts', (String(callbackQuery.message.chat.id) + '.json')), JSON.stringify(users[String(callbackQuery.message.chat.id)]), function(e) {
					/* */
					users[String(callbackQuery.message.chat.id)] = {};

					/* */
					let description = (e) ? '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.' : 'üíå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–º–æ—â–Ω–∏–∫–∞–º\n\n–ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–º–æ—â–Ω–∏–∫–æ–≤, –≤–∞–º –ø—Ä–∏–¥—ë—Ç –æ—Ç–≤–µ—Ç';

					/* */
					if(e) {
						console.log(e);
					}

					/* */
					telegram.sendMessage(callbackQuery.message.chat.id, description);
				});
			}
			break;
		}
		case 'delete': {
			if(is_scene(callbackQuery.message, 7)) {
				/* */
				users[String(callbackQuery.message.chat.id)] = {};

				/* */
				telegram.sendMessage(callbackQuery.message.chat.id, 'üóë –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞');
			}
			break;
		}
		default: {
			if(callbackQuery.data.match(/^open-(.*)$/)) {
				/* */
				let match = callbackQuery.data.match(/^open-(.*)$/);

				/* */
				fs.readFile(path.resolve(__dirname, 'accounts', match[1]), 'utf-8', function(e, d) {
					if(e) {
						/* */
						console.log(e);

						/* */
						telegram.sendMessage(callbackQuery.message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.code) + '.');
					}
					else {
						try {
							/* */
							let information = JSON.parse(d);

							/* */
							let description = 'üì® –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + information['chat']['first_name'] + ' - ';
							description += information['chat']['last_name'] + '.\nID —á–∞—Ç–∞: ' + information['chat']['id'] + '\n';
							description += '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @' + information['chat']['username'] + '\n\n';
							description += '–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: ' + information['come']['type'] + '\n';
							description += '–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ' + information['come']['description'] + '\n';
							description += '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ' + information['experience'] + '\n';
							description += '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ' + information['time'];

							/* */
							telegram.sendMessage(callbackQuery.message.chat.id, description, {
								reply_markup: {
									inline_keyboard: [
										[
											{
												text: '‚úîÔ∏è –ü—Ä–∏–Ω—è—Ç—å',
												callback_data: 'a-accepted-' + match[1]
											},
											{
												text: 'üóë –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
												callback_data: 'a-rejected-' + match[1]
											}
										]
									]
								}
							});
						}
						catch(e) {
							/* */
							console.log(e);

							/* */
							telegram.sendMessage(callbackQuery.message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.message) + '.');
						}
					}
				});
			}
			else if(callbackQuery.data.match(/^a-accepted-(.*)$/)) {
				/* */
				let match = callbackQuery.data.match(/^a-accepted-(.*)$/);

				/* */
				fs.rename(path.resolve(__dirname, 'accounts', match[1]), path.resolve(__dirname, 'accounts', 'accepted', match[1]), function(e) {
					if(e) {
						/* */
						console.log(e);

						/* */
						telegram.sendMessage(callbackQuery.message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.message) + '.');
					}
					else {
						/* */
						telegram.sendMessage(callbackQuery.message.chat.id, '‚ûï –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');

						/* */
						telegram.sendMessage(match[1].split('.json')[0], '‚ûï –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞.');
					}
				});
			}
			else if(callbackQuery.data.match(/^a-rejected-(.*)$/)) {
				/* */
				let match = callbackQuery.data.match(/^a-rejected-(.*)$/);

				/* */
				fs.rename(path.resolve(__dirname, 'accounts', match[1]), path.resolve(__dirname, 'accounts', 'rejected', match[1]), function(e) {
					if(e) {
						/* */
						console.log(e);

						/* */
						telegram.sendMessage(callbackQuery.message.chat.id, '–ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ - ' + String(e.message) + '.');
					}
					else {
						/* */
						telegram.sendMessage(callbackQuery.message.chat.id, '‚ûï –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.');

						/* */
						telegram.sendMessage(match[1].split('.json')[0], '‚òπÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É');
					}
				});
			}
			break;
		}
	}
});

/* */
telegram.on('message', ( message ) => {
	if(is_scene(message, 4)) {
		/* */
		users[String(message.chat.id)]['come']['description'] = message.text;
		users[String(message.chat.id)]['scene'] = 5;

		/* */
		telegram.sendMessage(message.chat.id, '‚ûï –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–ø—ã—Ç –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ, –µ—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–æ–π?');
	}
	else if(is_scene(message, 5)) {
		/* */
		users[String(message.chat.id)]['experience'] = message.text;
		users[String(message.chat.id)]['scene'] = 6;

		/* */
		telegram.sendMessage(message.chat.id, '‚ûï –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ –∏ –∫–∞–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∂–µ–ª–∞–µ—Ç–µ –¥–æ–±–∏—Ç—å—Å—è?');
	}
	else if(is_scene(message, 6)) {
		/* */
		users[String(message.chat.id)]['time'] = message.text;
		users[String(message.chat.id)]['scene'] = 7;

		/* */
		let description = 'üì® –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ\n\n';
		description += '–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: ' + users[String(message.chat.id)]['come']['type'] + '\n';
		description += '–ü–æ–¥—Ä–æ–±–Ω–µ–µ: ' + users[String(message.chat.id)]['come']['description'] + '\n';
		description += '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: ' + users[String(message.chat.id)]['experience'] + '\n';
		description += '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ' + users[String(message.chat.id)]['time'];

		/* */
		telegram.sendMessage(message.chat.id, description, {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '‚úîÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å',
							callback_data: 'send'
						},
						{
							text: 'üóë –£–¥–∞–ª–∏—Ç—å',
							callback_data: 'delete'
						}
					]
				]
			}
		});
	}
});

/* */
function is_scene( message, scene ) {
	if(String(message.chat.id) in users && 'scene' in users[String(message.chat.id)]) {
		if(parseInt(users[String(message.chat.id)]['scene']) === parseInt(scene)) {
			return true;
		}
	}
	return false;
}